{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","isLoading","employees","allEmployees","filterEmployees","event","selectedRole","target","value","console","log","setState","filter","employee","role","sortEmployees","sort","employee1","employee2","name","fetch","then","response","json","this","onChange","className","map","key","id","phone","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4LAmJeA,E,4MAhJbC,MAAQ,CACNC,WAAW,EACXC,UAAW,GACXC,aAAc,I,EAehBC,gBAAkB,SAAAC,GAChB,IAAMC,EAAeD,EAAME,OAAOC,MAGlC,GAFAC,QAAQC,IAAIJ,GAES,QAAjBA,EACF,EAAKK,SAAS,CAAET,UAAW,EAAKF,MAAMG,mBACjC,CAGL,IAAIC,EAAkB,EAAKJ,MAAMG,aAAaS,QAAO,SAAAC,GACnD,OAAIA,EAASC,OAASR,KAKxB,EAAKK,SAAS,CAAET,UAAWE,M,EAc/BW,cAAgB,SAACV,GACf,IAAIH,EAAY,EAAKF,MAAME,UAEL,aADAG,EAAME,OAAOC,OAKhCN,EAAYA,EAAUc,MAAK,SAACC,EAAWC,GACtC,OAAID,EAAUE,KAAOD,EAAUC,MACrB,EAGND,EAAUC,KAAOF,EAAUE,KACtB,EAGF,KAGT,EAAKR,SAAS,CAAET,gBAGfA,EAAYA,EAAUc,MAAK,SAACC,EAAWC,GACtC,OAAID,EAAUE,KAAOD,EAAUC,KACtB,EAGLF,EAAUE,KAAOD,EAAUC,MACrB,EAGH,KAGT,EAAKR,SAAS,CAAET,gB,kEA3EC,IAAD,OAClBkB,MAAM,mBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAnB,GACJ,EAAKS,SAAS,CACZT,UAAWA,EACXD,WAAW,EACXE,aAAcD,S,+BAmFf,IAAD,EAC2BsB,KAAKxB,MAA9BC,EADF,EACEA,UAAWC,EADb,EACaA,UAEnB,OAAID,EACK,2CAGP,oCACE,6BACE,iDACA,4BAAQwB,SAAUD,KAAKpB,iBACrB,4BAAQI,MAAM,OAAd,OACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,UAAd,YAIJ,6BACE,6CACA,4BAAQiB,SAAUD,KAAKT,eACrB,4BAAQP,MAAM,YAAd,QACA,4BAAQA,MAAM,WAAd,SAKJ,2BAAOkB,UAAU,SACf,4BACE,oCACA,oCACA,wCAEDxB,EAAUyB,KAAI,SAAAd,GAAQ,OACrB,wBAAIe,IAAKf,EAASgB,IAChB,4BAAKhB,EAASM,MACd,4BAAKN,EAASC,MACd,4BAAKD,EAASiB,iB,GAtIRC,IAAMC,WCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.071b0904.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    employees: [],\n    allEmployees: []\n  }\n\n  componentDidMount() {\n    fetch('/employees.json')\n      .then(response => response.json())\n      .then(employees => {\n        this.setState({\n          employees: employees,\n          isLoading: false,\n          allEmployees: employees\n        })\n      });\n  }\n\n  filterEmployees = event => {\n    const selectedRole = event.target.value;\n    console.log(selectedRole)\n\n    if (selectedRole === 'all') {\n      this.setState({ employees: this.state.allEmployees });\n    } else {\n\n      // set this equal to a varable\n      var filterEmployees = this.state.allEmployees.filter(employee => {\n        if (employee.role === selectedRole) {\n          return true\n        }\n        return false;\n      });\n      this.setState({ employees: filterEmployees });\n\n      /* \n      create a new employee array that filters to only employees that have the selected role\n  \n      use the filter function\n      */\n\n      // update it here\n      // set  the new employees as the updated state\n      // this.setState({ employees: /* new employees array goes here after filtered }) */\n    }\n  }\n\n  sortEmployees = (event) => {\n    let employees = this.state.employees;\n    const sortSelection = event.target.value;\n    if (sortSelection === 'alpOrder') {\n      // sorting the employees state\n\n\n       employees = employees.sort((employee1, employee2) => {\n        if (employee1.name < employee2.name) {\n          return -1;\n        }\n\n        if (employee2.name > employee1.name) {\n          return 1\n        }\n\n        return 0;\n      })\n\n      this.setState({ employees });\n    } else{\n\n       employees = employees.sort((employee1, employee2) => {\n        if (employee1.name < employee2.name) {\n          return 1;\n        }\n\n        if (employee1.name > employee2.name) {\n          return -1\n        }\n\n        return 0;\n      })\n\n      this.setState({ employees });\n\n    }\n\n\n\n\n    // doing the opposite sort here\n\n\n  }\n\n\n\n\nrender(){\n  const { isLoading, employees } = this.state;\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <>\n      <div>\n        <label>filter by role</label>\n        <select onChange={this.filterEmployees}>\n          <option value=\"all\">All</option>\n          <option value=\"manager\">Manager</option>\n          <option value=\"engineer\">Engineer</option>\n          <option value=\"intern\">Intern</option>\n          {/* List all roles as options here */}\n        </select>\n      </div>\n      <div>\n        <label>sort by...</label>\n        <select onChange={this.sortEmployees}>\n          <option value=\"alpOrder\"> A-Z</option>\n          <option value=\"reverse\">Z-A</option>\n\n          {/* List all roles as options here */}\n        </select>\n      </div>\n      <table className=\"table\">\n        <tr>\n          <th>Name</th>\n          <th>Role</th>\n          <th>Phone #</th>\n        </tr>\n        {employees.map(employee => (\n          <tr key={employee.id}>\n            <td>{employee.name}</td>\n            <td>{employee.role}</td>\n            <td>{employee.phone}</td>\n          </tr>\n        ))}\n      </table>\n    </>\n  )\n}};\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}